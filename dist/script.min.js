(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accordion = accordion;

var _createEventListener = require("../utilities/createEventListener.js");

function accordion() {
  var accordions = document.querySelectorAll('.accordion');
  (0, _createEventListener.createEventListener)('click', '.accordion__button', function (event) {
    var items = event.currentTarget.querySelectorAll('.accordion__item');
    var accordionAllOpen = event.currentTarget.classList.contains('accordion--all-open');
    var accordionButton = event.target;
    var accordionItem = event.target.closest('.accordion__item');
    var accordionBody = accordionItem.querySelector('.accordion__body');
    var accordionContainsCollapse = accordionBody.classList.contains('collapse');
    var accordionContainsShow = accordionBody.classList.contains('show');
    var accordionContent = accordionItem.querySelector('.accordion__content'); // const accordionCollapsed = accordionBody.getAttribute('data-accordion') === 'collapsed';
    // const accordionCollapseState = accordionBody.getAttribute('data-accordion');
    // const accordionHasAttribute = accordionBody.hasAttribute('data-accordion');
    // const accordionPanelState = event.currentTarget.getAttribute('data-accordion');

    function expand() {
      accordionBody.classList.remove('collapse');
      accordionBody.classList.add('transition');
      var sectionHeight = accordionBody.scrollHeight;
      accordionBody.style.setProperty('--height', sectionHeight + 'px');
      console.log(sectionHeight); // accordionBody.classList.remove('collapse');
      // accordionBody.classList.add('expanding');
      // const sectionHeight = accordionBody.scrollHeight;
      // accordionBody.style.height = sectionHeight + 'px';

      var adjustHeight = function adjustHeight() {
        accordionBody.classList.remove('transition'); // accordionBody.classList.add('collapse');

        accordionBody.classList.add('show'); // accordionBody.removeAttribute('style');

        accordionBody.removeEventListener('transitionend', adjustHeight);
        console.log('remove expand transition');
      };

      accordionBody.addEventListener('transitionend', adjustHeight);
    }

    function collapse() {
      accordionBody.classList.remove('show'); // accordionBody.classList.remove('collapse');

      var sectionHeight = accordionBody.scrollHeight;
      accordionBody.style.setProperty('--height', sectionHeight + 'px');
      accordionBody.classList.add('transition'); // accordionBody.style.height = sectionHeight + 'px';
      // accordionBody.classList.add('collapsing');

      var adjustHeight = function adjustHeight() {
        accordionBody.classList.remove('transition');
        accordionBody.classList.add('collapse');
        accordionBody.removeAttribute('style');
        accordionBody.removeEventListener('transitionend', adjustHeight);
      };

      accordionBody.addEventListener('transitionend', adjustHeight);
    }

    if (accordionContainsCollapse) {
      expand();
    } else {
      collapse();
    }
  }, accordions);
}

},{"../utilities/createEventListener.js":3}],2:[function(require,module,exports){
"use strict";

var _accordion = require("./modules/accordion.js");

(0, _accordion.accordion)();

},{"./modules/accordion.js":1}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEventListener = createEventListener;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function createEventListener(type, selector, callback) {
  var elements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;

  var _iterator = _createForOfIteratorHelper(elements),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var element = _step.value;
      element.addEventListener(type, function (event) {
        if (event.target.matches(selector)) {
          callback(event);
        }
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

},{}]},{},[2]);
